import smbus
import time

# ------------------ 配置参数 ------------------
I2C_BUS = 3              # 根据您的系统调整
OLED_ADDR = 0x3c         # 常见地址：0x3C 或 0x3D
WIDTH = 128
HEIGHT = 64
PAGES = HEIGHT // 8

# SSD1306 命令集
CMD_MODE = 0x00
DATA_MODE = 0x40

# 初始化命令序列
INIT_SEQUENCE = [
    0xAE,        # 关闭显示
    0xD5, 0x80,  # 设置时钟分频因子
    0xA8, 0x3F,  # 设置多路复用率 (1/64 duty)
    0xD3, 0x00,  # 设置显示偏移（无偏移）
    0x40,        # 设置显示起始行
    0x8D, 0x14,  # 启用充电泵
    0x20, 0x00,  # 设置内存寻址模式为水平模式
    0xA1,        # 设置段重映射（A0/A1）
    0xC8,        # 设置 COM 输出扫描方向
    0xDA, 0x12,  # 设置 COM 引脚硬件配置
    0x81, 0xCF,  # 设置对比度
    0xD9, 0xF1,  # 设置预充电周期
    0xDB, 0x40,  # 设置 VCOMH 取消选择级别
    0xA4,        # 启用全屏点亮（非全开模式）
    0xA6,        # 设置正常显示（非反色）
    0x21, 0x00, 0x7F,  # 设置列地址（0-127）
    0x22, 0x00, PAGES-1,  # 设置页地址（0-7）
    0xAF,        # 开启显示
]

class OLED:
    def __init__(self, bus_num=I2C_BUS, addr=OLED_ADDR):
        self.bus_num = bus_num
        self.addr = addr
        self.bus = smbus.SMBus(bus_num)
        self.buffer = [0x00] * (WIDTH * PAGES)  # 显存缓冲区
        self._initialize()

    def _write_cmd(self, cmd):
        """写入单个命令"""
        self.bus.write_byte_data(self.addr, CMD_MODE, cmd)

    def _write_data(self, data):
        """写入数据（批量）"""
        # 由于 I2C 单次传输限制，分块发送
        # 每次最多发 32 字节（某些适配器限制）
        for i in range(0, len(data), 32):
            chunk = data[i:i+32]
            self.bus.write_i2c_block_data(self.addr, DATA_MODE, chunk)

    def _initialize(self):
        """初始化 OLED"""
        for cmd in INIT_SEQUENCE:
            self._write_cmd(cmd)
        self.clear()
        self.display()

    def clear(self):
        """清空显存"""
        self.buffer = [0x00] * len(self.buffer)

    def display(self):
        """将缓冲区内容刷新到屏幕"""
        self._write_cmd(0x21)  # 列地址
        self._write_cmd(0x00)
        self._write_cmd(0x7F)
        self._write_cmd(0x22)  # 页地址
        self._write_cmd(0x00)
        self._write_cmd(PAGES - 1)
        self._write_data(self.buffer)

    def pixel(self, x, y, color=1):
        """设置单个像素点"""
        if x < 0 or x >= WIDTH or y < 0 or y >= HEIGHT:
            return
        byte_idx = x + (y // 8) * WIDTH
        if color:
            self.buffer[byte_idx] |= (1 << (y & 7))
        else:
            self.buffer[byte_idx] &= ~(1 << (y & 7))

    def text(self, string, x, y):
        """在指定位置显示 ASCII 文本"""
        for char in string:
            if x > WIDTH - 8:
                break
            if ord(char) < 32 or ord(char) > 126:
                char = '?'  # 非打印字符替换
            self._draw_char(char, x, y)
            x += 8

    def _draw_char(self, char, x, y):
        """绘制单个字符（简单 8x8 字模）"""
        # 简化字模：仅支持基本 ASCII
        font = [
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, # (space)
            0x00,0x00,0x5F,0x00,0x00,0x00,0x00,0x00, # !
            0x00,0x07,0x00,0x07,0x00,0x00,0x00,0x00, # "
            0x14,0x7F,0x14,0x7F,0x14,0x00,0x00,0x00, # #
            0x24,0x2A,0x7F,0x2A,0x12,0x00,0x00,0x00, # $
            0x23,0x13,0x08,0x64,0x62,0x00,0x00,0x00, # %
            0x36,0x49,0x55,0x22,0x50,0x00,0x00,0x00, # &
            0x00,0x05,0x03,0x00,0x00,0x00,0x00,0x00, # '
            0x00,0x1C,0x22,0x41,0x00,0x00,0x00,0x00, # (
            0x00,0x41,0x22,0x1C,0x00,0x00,0x00,0x00, # )
            0x14,0x08,0x3E,0x08,0x14,0x00,0x00,0x00, # *
            0x08,0x08,0x3E,0x08,0x08,0x00,0x00,0x00, # +
            0x00,0x50,0x30,0x00,0x00,0x00,0x00,0x00, # ,
            0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x00, # -
            0x00,0x60,0x60,0x00,0x00,0x00,0x00,0x00, # .
            0x20,0x10,0x08,0x04,0x02,0x00,0x00,0x00, # /
            0x3E,0x51,0x49,0x45,0x3E,0x00,0x00,0x00, # 0
            0x00,0x42,0x7F,0x40,0x00,0x00,0x00,0x00, # 1
            0x42,0x61,0x51,0x49,0x46,0x00,0x00,0x00, # 2
            0x21,0x41,0x45,0x4B,0x31,0x00,0x00,0x00, # 3
            0x18,0x14,0x12,0x7F,0x10,0x00,0x00,0x00, # 4
            0x27,0x45,0x45,0x45,0x39,0x00,0x00,0x00, # 5
            0x3C,0x4A,0x49,0x49,0x30,0x00,0x00,0x00, # 6
            0x01,0x71,0x09,0x05,0x03,0x00,0x00,0x00, # 7
            0x36,0x49,0x49,0x49,0x36,0x00,0x00,0x00, # 8
            0x06,0x49,0x49,0x29,0x1E,0x00,0x00,0x00, # 9
            0x00,0x36,0x36,0x00,0x00,0x00,0x00,0x00, # :
            0x00,0x56,0x36,0x00,0x00,0x00,0x00,0x00, # ;
            0x00,0x08,0x14,0x22,0x41,0x00,0x00,0x00, # <
            0x14,0x14,0x14,0x14,0x14,0x00,0x00,0x00, # =
            0x00,0x41,0x22,0x14,0x08,0x00,0x00,0x00, # >
            0x02,0x01,0x51,0x09,0x06,0x00,0x00,0x00, # ?
            0x3E,0x41,0x5D,0x55,0x1E,0x00,0x00,0x00, # @
            0x7C,0x12,0x11,0x12,0x7C,0x00,0x00,0x00, # A
            0x7F,0x49,0x49,0x49,0x36,0x00,0x00,0x00, # B
            0x3E,0x41,0x41,0x41,0x22,0x00,0x00,0x00, # C
            0x7F,0x41,0x41,0x41,0x3E,0x00,0x00,0x00, # D
            0x7F,0x49,0x49,0x49,0x41,0x00,0x00,0x00, # E
            0x7F,0x09,0x09,0x09,0x01,0x00,0x00,0x00, # F
            0x3E,0x41,0x49,0x49,0x7A,0x00,0x00,0x00, # G
            0x7F,0x08,0x08,0x08,0x7F,0x00,0x00,0x00, # H
            0x00,0x41,0x7F,0x41,0x00,0x00,0x00,0x00, # I
            0x20,0x40,0x41,0x3F,0x01,0x00,0x00,0x00, # J
            0x7F,0x08,0x14,0x22,0x41,0x00,0x00,0x00, # K
            0x7F,0x40,0x40,0x40,0x40,0x00,0x00,0x00, # L
            0x7F,0x02,0x0C,0x02,0x7F,0x00,0x00,0x00, # M
            0x7F,0x04,0x08,0x10,0x7F,0x00,0x00,0x00, # N
            0x3E,0x41,0x41,0x41,0x3E,0x00,0x00,0x00, # O
            0x7F,0x09,0x09,0x09,0x06,0x00,0x00,0x00, # P
            0x3E,0x41,0x51,0x21,0x5E,0x00,0x00,0x00, # Q
            0x7F,0x09,0x09,0x09,0x76,0x00,0x00,0x00, # R
            0x26,0x49,0x49,0x49,0x32,0x00,0x00,0x00, # S
            0x01,0x01,0x7F,0x01,0x01,0x00,0x00,0x00, # T
            0x3F,0x40,0x40,0x40,0x3F,0x00,0x00,0x00, # U
            0x1F,0x20,0x40,0x20,0x1F,0x00,0x00,0x00, # V
            0x3F,0x40,0x38,0x40,0x3F,0x00,0x00,0x00, # W
            0x63,0x14,0x08,0x14,0x63,0x00,0x00,0x00, # X
            0x07,0x08,0x70,0x08,0x07,0x00,0x00,0x00, # Y
            0x61,0x51,0x49,0x45,0x43,0x00,0x00,0x00, # Z
            0x00,0x7F,0x41,0x41,0x00,0x00,0x00,0x00, # [
            0x02,0x04,0x08,0x10,0x20,0x00,0x00,0x00, # \
            0x00,0x41,0x41,0x7F,0x00,0x00,0x00,0x00, # ]
            0x04,0x02,0x01,0x02,0x04,0x00,0x00,0x00, # ^
            0x40,0x40,0x40,0x40,0x40,0x00,0x00,0x00, # _
            0x00,0x01,0x02,0x04,0x00,0x00,0x00,0x00, # `
            0x20,0x54,0x54,0x54,0x78,0x00,0x00,0x00, # a
            0x7F,0x48,0x44,0x44,0x38,0x00,0x00,0x00, # b
            0x38,0x44,0x44,0x44,0x28,0x00,0x00,0x00, # c
            0x38,0x44,0x44,0x48,0x7F,0x00,0x00,0x00, # d
            0x38,0x54,0x54,0x54,0x18,0x00,0x00,0x00, # e
            0x08,0x7E,0x09,0x09,0x00,0x00,0x00,0x00, # f
            0x18,0xA4,0xA4,0xA4,0x7C,0x00,0x00,0x00, # g
            0x7F,0x08,0x04,0x04,0x78,0x00,0x00,0x00, # h
            0x00,0x44,0x7D,0x40,0x00,0x00,0x00,0x00, # i
            0x20,0x40,0x44,0x3D,0x00,0x00,0x00,0x00, # j
            0x7F,0x10,0x28,0x44,0x00,0x00,0x00,0x00, # k
            0x00,0x41,0x7F,0x40,0x00,0x00,0x00,0x00, # l
            0x7C,0x04,0x78,0x04,0x78,0x00,0x00,0x00, # m
            0x7C,0x08,0x04,0x04,0x78,0x00,0x00,0x00, # n
            0x38,0x44,0x44,0x44,0x38,0x00,0x00,0x00, # o
            0xFC,0x18,0x24,0x24,0x18,0x00,0x00,0x00, # p
            0x18,0x24,0x24,0x18,0xFC,0x00,0x00,0x00, # q
            0x7C,0x08,0x04,0x04,0x08,0x00,0x00,0x00, # r
            0x48,0x54,0x54,0x54,0x24,0x00,0x00,0x00, # s
            0x04,0x04,0x3F,0x44,0x40,0x00,0x00,0x00, # t
            0x3C,0x40,0x40,0x20,0x7C,0x00,0x00,0x00, # u
            0x1C,0x20,0x40,0x20,0x1C,0x00,0x00,0x00, # v
            0x3C,0x40,0x30,0x40,0x3C,0x00,0x00,0x00, # w
            0x44,0x28,0x10,0x28,0x44,0x00,0x00,0x00, # x
            0x1C,0xA0,0xA0,0xA0,0x7C,0x00,0x00,0x00, # y
            0x44,0x64,0x54,0x4C,0x44,0x00,0x00,0x00, # z
            0x00,0x08,0x36,0x41,0x00,0x00,0x00,0x00, # {
            0x00,0x00,0x77,0x00,0x00,0x00,0x00,0x00, # |
            0x00,0x41,0x36,0x08,0x00,0x00,0x00,0x00, # }
            0x02,0x01,0x02,0x04,0x02,0x00,0x00,0x00, # ~
        ]

        char_data = font[(ord(char) - 32) * 8 : (ord(char) - 32 + 1) * 8]
        for page in range(8):
            if y + page >= PAGES * 8:
                break
            idx = x + (y // 8 + page) * WIDTH
            if idx < len(self.buffer):
                self.buffer[idx] = char_data[page]

    def __del__(self):
        if hasattr(self, 'bus'):
            self.bus.close()


# ==================== 主函数示例 ====================
def main():
    try:
        oled = OLED(bus_num=3, addr=OLED_ADDR)
        oled.text("Hello,", 0, 0)
        oled.text("OLED 0.96\"", 0, 10)
        oled.pixel(10, 10, 1)
        oled.pixel(11, 10, 1)
        oled.display()

        time.sleep(2)

        # 动态显示时间
        while True:
            oled.clear()
            current_time = time.strftime("%H:%M:%S", time.localtime())
            date_str = time.strftime("%m-%d %a", time.localtime())
            oled.text(current_time, 20, 20)
            oled.text(date_str, 20, 30)
            oled.text("I2C ADDR:", 0, 50)
            oled.text(f"0x{OLED_ADDR:02X}", 80, 50)
            oled.display()
            time.sleep(1)

    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()